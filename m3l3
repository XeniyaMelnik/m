import sqlite3
from config import DATABASE

class DB_Manager:
    def __init__(self, database):
        self.database = database  # имя базы данных

    def create_tables(self):
        with sqlite3.connect(self.database) as conn:
            cur = conn.cursor()
            
            # Создание таблицы проектов
            cur.execute("""
                CREATE TABLE IF NOT EXISTS projects (
                    project_id INTEGER PRIMARY KEY,
                    user_id INTEGER,
                    project_name TEXT NOT NULL,
                    description TEXT,
                    url TEXT,
                    status_id INTEGER,
                    FOREIGN KEY(status_id) REFERENCES status(status_id) ON DELETE SET NULL
                )
            """)

            # Создание таблицы статусов
            cur.execute("""
                CREATE TABLE IF NOT EXISTS status (
                    status_id INTEGER PRIMARY KEY,
                    status_name TEXT NOT NULL
                )
            """)

            # Создание таблицы навыков
            cur.execute("""
                CREATE TABLE IF NOT EXISTS skills (
                    skill_id INTEGER PRIMARY KEY,
                    skill_name TEXT NOT NULL
                )
            """)

            # Создание таблицы связи проектов и навыков
            cur.execute("""
                CREATE TABLE IF NOT EXISTS project_skills (
                    id INTEGER PRIMARY KEY,
                    project_id INTEGER,
                    skill_id INTEGER,
                    FOREIGN KEY(project_id) REFERENCES projects(project_id) ON DELETE CASCADE,
                    FOREIGN KEY(skill_id) REFERENCES skills(skill_id) ON DELETE CASCADE
                )
            """)

            conn.commit()

    def executemany(self, sql, data):
        with sqlite3.connect(self.database) as conn:
            cur = conn.cursor()
            cur.executemany(sql, data)
            conn.commit()

    def __select_data(self, sql, data=tuple()):
        with sqlite3.connect(self.database) as conn:
            cur = conn.cursor()
            cur.execute(sql, data)
            return cur.fetchall()
    
    def default_insert(self):
        skills = [('Python',), ('SQL',), ('API',), ('Telegram',)]
        statuses = [('На этапе проектирования',), ('В процессе разработки',), 
                    ('Разработан. Готов к использованию.',), ('Обновлен',), 
                    ('Завершен. Не поддерживается',)]
        
        sql = 'INSERT OR IGNORE INTO skills (skill_name) VALUES (?)'
        self.executemany(sql, skills)
        
        sql = 'INSERT OR IGNORE INTO status (status_name) VALUES (?)'
        self.executemany(sql, statuses)

    def insert_project(self, data):
        sql = """INSERT INTO projects (user_id, project_name, description, url, status_id) 
                 VALUES (?, ?, ?, ?, ?)"""
        self.executemany(sql, [data])

    def get_statuses(self):
        sql = "SELECT status_name FROM status"
        return self.__select_data(sql)

    def get_projects(self, user_id):
        sql = "SELECT project_name FROM projects WHERE user_id = ?"
        return self.__select_data(sql, (user_id,))

    def update_projects(self, param, data):
        # Безопасное обновление через параметризованный запрос
        allowed_params = {"project_name", "description", "url", "status_id"}
        if param not in allowed_params:
            raise ValueError("Недопустимое поле для обновления")
        
        sql = f"UPDATE projects SET {param} = ? WHERE project_id = ? AND user_id = ?"
        self.executemany(sql, [data])

    def delete_project(self, user_id, project_id):
        sql = "DELETE FROM projects WHERE user_id = ? AND project_id = ?"
        self.executemany(sql, [(user_id, project_id)])

    def delete_skill(self, project_id, skill_id):
        sql = "DELETE FROM project_skills WHERE project_id = ? AND skill_id = ?"
        self.executemany(sql, [(project_id, skill_id)])
